import { QueryParams } from "./QueryParams";
import * as fs from "fs";
import { getDayBeforeTime } from "./time";
import { processData } from "./processData";
import { GenerationValues } from "./GenerationValues";

// print out percentage of energy generated by this BA
export async function generationPercentage(BA: string) {
    const apiKey: string = fs.readFileSync("./api_key.txt", "utf8");
    const generationQueryParams: QueryParams = {
        api_key: apiKey,
        frequency: "hourly",
        data: ["value"],
        facets: [["respondent", BA]],
        start: getDayBeforeTime(),
        end: null,
        sort: [
            {
                column: "period",
                direction: "desc",
            },
        ],
        offset: "0",
        length: "5000",
    };

    const data: GenerationValues[] = await processData("generation", generationQueryParams);
    let total = data.reduce((sum, current) => sum + current.value, 0);
    console.log(`Net generation for ${BA}:`);
    return data.map((n) => {
        const percentage = (n.value / total) * 100;
        console.log(
            `${n["type-name"]} is ${percentage.toFixed(2)} wtih value ${n.value} ${
                n["value-units"]
            }`
        );
        return percentage;
    });
}
